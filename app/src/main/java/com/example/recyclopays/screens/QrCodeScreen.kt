package com.example.recyclopays.screens

import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountCircle
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.google.zxing.BarcodeFormat
import com.google.zxing.qrcode.QRCodeWriter

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QrCodeScreen(navController: NavHostController) {
    var textValue by remember{ mutableStateOf(TextFieldValue("terracyle.com")) }
    var qrCodeGenerated by remember { mutableStateOf<Bitmap?>(null) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .fillMaxHeight()
            .background(color = Color.White)
            .padding(horizontal = 0.dp),

        verticalArrangement = Arrangement.SpaceBetween

    ) {

        Column(modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 20.dp, vertical = 8.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.SpaceEvenly
        ) {
            
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                Text("Apresente o QRCode na máquina",
                    textAlign = TextAlign.Center)

                if(qrCodeGenerated != null){
                    Image(bitmap = qrCodeGenerated!!.asImageBitmap(),
                    contentDescription = "",
                        modifier = Modifier.size(220.dp)

                    )
                } else {

                    Icon(
                        painter = painterResource(id = com.example.recyclopays.R.drawable.baseline_qr_code_scanner_24),
                        contentDescription = "",
                        modifier = Modifier.size(220.dp)
                    )
                }
            }

            Column() {


                TextField(
                    value = textValue,
                    modifier = Modifier
                        .border(
                            width = 2.dp,
                            color = Color(0xFF0000),
                            shape = RoundedCornerShape(10.dp),
                        )
                        .fillMaxWidth(),
                    placeholder = {
                        Text(
                            text = "Entre com o texto",
                            textAlign = TextAlign.Center,
                            modifier = Modifier.fillMaxWidth()
                        )
                    },
                    shape = RoundedCornerShape(10.dp),
                    colors = TextFieldDefaults.textFieldColors(
                        containerColor = Color.White
                    ),
                    onValueChange = {
                        textValue = it
                    })

                Spacer(Modifier.height(20.dp))

                RoundedButton(
                    onClick = {
                              qrCodeGenerated = generateQrCode(textValue.text)
                    },
                    enabled = textValue.text.isNotEmpty(),
                    text = "Gerar QRCode",
                    color = Color(0xFF13CB26)
                )
            }
        }

        // box com os icones
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(55.dp)
                .background(color = Color(0xFF13CB26)),
            contentAlignment = Alignment.BottomCenter
        ) {
            Row(
                modifier = Modifier
                    .fillMaxSize()
                ,
                horizontalArrangement = Arrangement.SpaceEvenly,
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Aqui você pode adicionar seus ícones horizontalmente
                Icon(
                    imageVector = Icons.Default.Home,
                    contentDescription = "Home Icon",
                    modifier = Modifier
                        .size(30.dp)
                        .clickable { navController.navigate("login") },
                    tint = Color.White
                )
                Icon(
                    imageVector = Icons.Default.Menu,
                    contentDescription = "Menu Icon",
                    modifier = Modifier
                        .size(30.dp)
                        .clickable { navController.navigate("metrica") },
                    tint = Color.White
                )
                Icon(
                    painter = painterResource(id = com.example.recyclopays.R.drawable.baseline_qr_code_scanner_24),
                    contentDescription = "Qr Code",
                    modifier = Modifier
                        .size(30.dp)
                        .clickable { navController.navigate("qrcode") },
                    tint = Color.White
                )
                Icon(
                    imageVector = Icons.Default.AccountCircle,
                    contentDescription = "Account Circle",
                    modifier = Modifier.size(30.dp),
                    tint = Color.White
                )
            }
        }

        // final das boxes
    }

}

fun generateQrCode(text: String) : Bitmap {
    val matrix = QRCodeWriter().encode(text, BarcodeFormat.QR_CODE, 512, 512)
    val w = matrix.width
    val h = matrix.height

    val bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.RGB_565)

    for (y in 0 until h) {
        for (x in 0 until w){
            bitmap.setPixel(x, y, if (matrix.get(x, y))
                android.graphics.Color.BLACK
                else
                    android.graphics.Color.WHITE)

        }
    }

    return bitmap
}

@Composable
fun RoundedButton(
    onClick: () -> Unit,
    enabled: Boolean,
    text: String,
    color: Color,
    ){
    Button(
        onClick = onClick,
        enabled = enabled,
        shape = RoundedCornerShape(10.dp),
        modifier = Modifier.fillMaxWidth(),
        colors = ButtonDefaults.buttonColors(
            containerColor = color,
            contentColor = Color.Black
        )
    ) {
        Text(text, modifier = Modifier.padding(vertical = 6.dp),
        color = Color.White)
    }
}